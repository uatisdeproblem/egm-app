{"version":3,"sources":["../node_modules/@ionic/core/components/input-shims.js"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","getScrollData","contentEl","keyboardHeight","itemEl","closest","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","footerEl","coord","touchStart","ev","pointerCoord","touchEnd","endCoord","hasPointerMoved","stopPropagation","jsSetFocus","a","scrollData","focus","raf","click","window","scrollContent","undefined","scrollContentTimeout","clearTimeout","doubleKeyboardEventListener","scrollByPoint","getScrollElement","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","setTimeout","threshold","startCoord","deltaX","x","deltaY","y","setScrollPadding","tagName","parentElement","el","timer","setProperty","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","focused","didScroll","onScroll","onFocusin","onTouchend","active","matches","tapped","target","blur","enableInputBlurring","onFocusout","enableScrollPadding","detail","fn","unregisterInput"],"mappings":"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","file":"static/js/4.3f230b82.chunk.js","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => { return; };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round((distanceToBottom < 0)\n    ? -distanceToBottom\n    : (distanceToTop > 0)\n      ? -distanceToTop\n      : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.stopPropagation();\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /* tslint:disable-next-line */\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await contentEl.getScrollElement();\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = (startCoord.x - endCoord.x);\n    const deltaY = (startCoord.y - endCoord.y);\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > (threshold * threshold);\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (input.parentElement &&\n    input.parentElement.parentElement &&\n    input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = input.closest('ion-content');\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise(resolve => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = componentEl.closest('ion-content');\n    const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    if ((!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"sourceRoot":""}