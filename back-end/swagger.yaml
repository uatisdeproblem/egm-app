openapi: 3.0.3

info:
  title: EGM API
  version: 3.5.0
  contact:
    name: EGM Technical Lead
    email: egm-technical@esn.org
    url: https://esn.org

servers:
  # if needed, substitute the correct API URL
  - url: https://api.egm.click/{environment}
    variables:
      environment:
        enum: [dev, prod]
        default: dev
        description: The API stage

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/egm-app/blob/main/back-end/src/models

tags:
  - name: Status
    description: The app's status
  - name: Auth
    description: Access the platform
  - name: Configurations
    description: The platfrom's configurations
  - name: Users
    description: The users of the platform
  - name: Event
    description: The event-related actions
  - name: UsefulLinks
    description: The useful links available to the users to explore more contents
  - name: Venues
    description: The venues of the event
  - name: Communications
    description: The event's communications and announcements.
  - name: Organizations
    description: The organizations of the event
  - name: Rooms
    description: The rooms of the event
  - name: Speakers
    description: The speakers of the event
  - name: Sessions
    description: The sessions of the event
  - name: Contests
    description: The contests of the event
  - name: Meals
    description: The meals of the event

paths:
  /status:
    get:
      summary: Get the status of the app, depending on its version
      tags: [Status]
      parameters:
        - name: v
          in: query
          description: App version; if not specified, targets the latest version
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/AppStatus'
  /galaxy:
    get:
      summary: End the login flow via ESN Accounts auth service
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Auth]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with ESN Accounts
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /cognito:
    post:
      summary: Actions on Cognito auth service
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [SIGN_IN, SIGN_UP, RESET_PASSWORD, RESET_PASSWORD_CONFIRM]
                email:
                  type: string
                  description: (SIGN_IN, SIGN_UP, RESET_PASSWORD, RESET_PASSWORD_CONFIRM)
                password:
                  type: string
                  description: (SIGN_IN, SIGN_UP)
                confirmationCode:
                  type: string
                  description: (RESET_PASSWORD_CONFIRM)
                firstName:
                  type: string
                  description: (SIGN_UP)
                lastName:
                  type: string
                  description: (SIGN_UP)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /media:
    post:
      summary: Get a signed URL to upload a new image
      description: Requires to be Administrator
      tags: [Configurations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /configurations:
    get:
      summary: Get the platform's configurations
      description: Requires to be admin
      tags: [Configurations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Configurations'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit the platform's configurations
      description: Requires to be admin
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configurations'
      responses:
        200:
          $ref: '#/components/responses/Configurations'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Set specific configurations
      description: Requires to be admin
      tags: [Configurations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - GET_EMAIL_TEMPLATE
                    - SET_EMAIL_TEMPLATE
                    - RESET_EMAIL_TEMPLATE
                    - TEST_EMAIL_TEMPLATE
                subject:
                  type: string
                  description: (SET_EMAIL_TEMPLATE_SPOT_ASSIGNED, SET_EMAIL_TEMPLATE_REGISTRATION_CONFIRMED)
                content:
                  type: string
                  description: (SET_EMAIL_TEMPLATE_SPOT_ASSIGNED, SET_EMAIL_TEMPLATE_REGISTRATION_CONFIRMED)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /users:
    get:
      summary: Get the users of the app
      description: Requires canManageRegistrations permission
      tags: [Users]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Users'
        400:
          $ref: '#/components/responses/BadParameters'
  /users/{userId}:
    get:
      summary: Get a user's profile
      description: Requires to be the requesting user or canManageRegistrations permission
      tags: [Users]
      security:
        - AuthFunction: []
      parameters:
        - name: userId
          in: path
          description: The user ID.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a user's data
      description: Requires to be the requesting user or canManageRegistrations permission
      tags: [Users]
      security:
        - AuthFunction: []
      parameters:
        - name: userId
          in: path
          description: The user ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on an user
      tags: [Users]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [
                      GET_AVATAR_UPLOAD_URL,
                      REGISTER_TO_EVENT,
                      CHANGE_PERMISSIONS,
                      GET_PROOF_OF_PAYMENT,
                      PUT_PROOF_OF_PAYMENT_START,
                      PUT_PROOF_OF_PAYMENT_END,
                      GET_INVOICE,
                      ADD_FAVORITE_SESSION
                      REMOVE_FAVORITE_SESSION
                      GET_FAVORITE_SESSIONS
                    ]
                registrationForm:
                  type: number
                  description: (REGISTER_TO_EVENT)
                isDraft:
                  type: boolean
                  description: (REGISTER_TO_EVENT)
                permissions:
                  type: number
                  description: (CHANGE_PERMISSIONS)
                fileURI:
                  type: string
                  description: (PUT_PROOF_OF_PAYMENT_END)
                sessionId:
                  type: string
                  description: (ADD_FAVORITE_SESSION, REMOVE_FAVORITE_SESSION)
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Remove a user's profile and data
      description: Requires to be the requesting user or canManageRegistrations permission
      tags: [Users]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /event-spots:
    get:
      summary: Get the spots available for the event
      description: Requires to be admin
      tags: [Event]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/EventSpots'
        400:
          $ref: '#/components/responses/BadParameters'
    post:
      summary: Add a batch of new spots
      description: Requires to be admin or canManageRegistrations permission
      tags: [Event]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSpot'
      responses:
        200:
          $ref: '#/components/responses/EventSpots'
        400:
          $ref: '#/components/responses/BadParameters'
  /event-spots/{spotId}:
    get:
      summary: Get a spot to the event
      description: Requires to be admin or canManageRegistrations permission
      tags: [Event]
      security:
        - AuthFunction: []
      parameters:
        - name: spotId
          in: path
          description: The spot ID.
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/EventSpot'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a spot to the event
      description: Requires to be admin or canManageRegistrations permission (for some actions isCountryLeader is enough)
      tags: [Event]
      security:
        - AuthFunction: []
      parameters:
        - name: spotId
          in: path
          description: The spot ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    [ASSIGN_TO_USER, TRANSFER_TO_USER, CONFIRM_PAYMENT, ASSIGN_TO_COUNTRY, RELEASE, EDIT_DESCRIPTION]
                userId:
                  type: string
                  description: (ASSIGN_TO_USER, TRANSFER_TO_USER)
                sectionCountry:
                  type: string
                  description: (ASSIGN_TO_COUNTRY)
                description:
                  type: string
                  description: (EDIT_DESCRIPTION)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Remove a spot to the event or canManageRegistrations permission
      description: Requires to be admin
      tags: [Event]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /useful-links:
    get:
      summary: Get the useful links
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/UsefulLinks'
    post:
      summary: Insert a new useful link
      description: Requires to be content manager
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsefulLink'
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
        400:
          $ref: '#/components/responses/BadParameters'
  /useful-links/{linkId}:
    get:
      summary: Get a useful link
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
    put:
      summary: Edit a useful link
      description: Requires to be content manager
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsefulLink'
      responses:
        200:
          $ref: '#/components/responses/UsefulLink'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a useful link
      description: Requires to be content manager
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [SWAP_SORT]
                otherLinkId:
                  type: string
                  description: (SWAP_SORT)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a useful link
      description: Requires to be content manager
      tags: [UsefulLinks]
      security:
        - AuthFunction: []
      parameters:
        - name: linkId
          in: path
          description: Link ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /venues:
    get:
      summary: Get the venues
      tags: [Venues]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Venues'
    post:
      summary: Insert a new venue
      description: Requires to be content manager
      tags: [Venues]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Venue
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Venue'
        400:
          $ref: '#/components/responses/BadParameters'
  /venues/{venueId}:
    get:
      summary: Get a venue
      tags: [Venues]
      security:
        - AuthFunction: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Venue'
    post:
      summary: Insert a new venue
      description: Requires to be content manager
      tags: [Venues]
      security:
        - AuthFunction: []
      parameters:
        - name: venueId
          in: path
          description: Venue ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        200:
          $ref: '#/components/responses/Venue'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a venue
      description: Requires to be content manager
      tags: [Venues]
      security:
        - AuthFunction: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Venue
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Venue'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a venue
      description: Requires to be content manager
      tags: [Venues]
      security:
        - AuthFunction: []
      parameters:
        - name: venueId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /communications:
    get:
      summary: Get the communications
      tags: [Communications]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Communications'
    post:
      summary: Insert a new communication
      description: Requires to be content manager
      tags: [Communications]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Communication
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Communication'
        400:
          $ref: '#/components/responses/BadParameters'
  /communications/{communicationId}:
    get:
      summary: Get a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Communication'
    put:
      summary: Edit a communication
      description: Requires to be content manager
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Communication
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Communication'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a communication
      tags: [Communications, Users]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - MARK_AS_READ
                    - MARK_AS_UNREAD
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a communication
      description: Requires to be content manager
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /organizations:
    get:
      summary: Get the organizations
      tags: [Organizations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Organizations'
    post:
      summary: Insert a new organization
      description: Requires to be content manager
      tags: [Organizations]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Organization
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Organization'
        400:
          $ref: '#/components/responses/BadParameters'
  /organizations/{organizationId}:
    get:
      summary: Get an organization
      tags: [Organizations]
      security:
        - AuthFunction: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Organization'
    post:
      summary: Insert an organization
      description: Requires to be content manager
      tags: [Organizations]
      security:
        - AuthFunction: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Organization
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Organization'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit an organization
      description: Requires to be content manager
      tags: [Organizations]
      security:
        - AuthFunction: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Organization
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Organization'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete an organization
      description: Requires to be content manager
      tags: [Organizations]
      security:
        - AuthFunction: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /rooms:
    get:
      summary: Get the rooms
      tags: [Rooms]
      security:
        - AuthFunction: []
      parameters:
        - name: venue
          in: query
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Rooms'
    post:
      summary: Insert a new room
      description: Requires to be content manager
      tags: [Rooms]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Room
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Room'
        400:
          $ref: '#/components/responses/BadParameters'
  /rooms/{roomId}:
    get:
      summary: Get a room
      tags: [Rooms]
      security:
        - AuthFunction: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Room'
    post:
      summary: Insert a room
      description: Requires to be content manager
      tags: [Rooms]
      security:
        - AuthFunction: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Room
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Room'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a room
      description: Requires to be content manager
      tags: [Rooms]
      security:
        - AuthFunction: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Room
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Room'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a room
      description: Requires to be content manager
      tags: [Rooms]
      security:
        - AuthFunction: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Room'
        400:
          $ref: '#/components/responses/BadParameters'
  /speakers:
    get:
      summary: Get the speakers
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: organization
          in: query
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Speakers'
    post:
      summary: Insert a new speaker
      description: Requires to be content manager
      tags: [Speakers]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Speaker
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Speaker'
        400:
          $ref: '#/components/responses/BadParameters'
  /speakers/{speakerId}:
    get:
      summary: Get a speaker
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Speaker'
    post:
      summary: Insert a speaker
      description: Requires to be content manager
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Speaker
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Speaker'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a speaker
      description: Requires to be content manager
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Speaker
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Speaker'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a speaker
      description: Requires to be content manager
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /sessions:
    get:
      summary: Get the sessions
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: speaker
          in: query
          schema:
            type: string
        - name: venue
          in: query
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Sessions'
    post:
      summary: Insert a new session
      description: Requires to be content manager
      tags: [Sessions]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Session
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
  /sessions/{sessionId}:
    get:
      summary: Get a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Session'
    post:
      summary: Insert a session
      description: Requires to be content manager
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Session
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a session
      description: Requires to be content manager
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Session
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [GIVE_FEEDBACK]
                rating:
                  type: number
                  description: (GIVE_FEEDBACK)
                comment:
                  type: string
                  description: (GIVE_FEEDBACK)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a session
      description: Requires to be content manager
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /registrations:
    get:
      summary: Get the registrations for a user or for a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
        - name: export
          in: query
          description: If set, returns an exportable version of the registrations; it requires to be content manager
          schema:
            type: boolean
      responses:
        200:
          $ref: '#/components/responses/Registrations'
  /registrations/{sessionId}:
    get:
      summary: Get a session registration
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Registration'
    post:
      summary: Create a new session registration
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Registration
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Registration'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a registration
      description: Requires to be Admin or the registered user.
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /connections:
    get:
      summary: Get the connections of a user
      tags: [Users]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/User'
    post:
      summary: Create a new connection between the requester user and a target user or confirm a pending connection
      tags: [Users]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/User'
        400:
          $ref: '#/components/responses/BadParameters'
  /connections/{connectionId}:
    delete:
      summary: Delete the connection of a user with a target
      tags: [Users]
      security:
        - AuthFunction: []
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /contests:
    get:
      summary: Get the contests
      tags: [Contests]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Contests'
    post:
      summary: Insert a new contest
      description: Requires to be content manager
      tags: [Contests]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Contest
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Contest'
        400:
          $ref: '#/components/responses/BadParameters'
  /contests/{contestId}:
    get:
      summary: Get a contest
      tags: [Contests]
      security:
        - AuthFunction: []
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Contest'
    put:
      summary: Edit a contest
      description: Requires to be content manager
      tags: [Contests]
      security:
        - AuthFunction: []
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Contest
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Contest'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a contest
      tags: [Contests]
      security:
        - AuthFunction: []
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [VOTE, PUBLISH_RESULTS]
                candidate:
                  type: string
                  description: (VOTE)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a contest
      description: Requires to be content manager
      tags: [Contests]
      security:
        - AuthFunction: []
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Contest'
        400:
          $ref: '#/components/responses/BadParameters'
  /meals:
    get:
      summary: Get the meals
      tags: [Meals]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Meals'
    post:
      summary: Insert a new meal
      description: Requires to be content manager
      tags: [Meals]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        description: Meal
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Meal'
        400:
          $ref: '#/components/responses/BadParameters'
  /meals/{mealId}:
    get:
      summary: Get a meal
      tags: [Meals]
      security:
        - AuthFunction: []
      parameters:
        - name: mealId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Meal'
    post:
      summary: Create a meal
      description: Requires to be content manager
      tags: [Meals]
      security:
        - AuthFunction: []
      parameters:
        - name: mealId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Meal
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Meal'
        400:
          $ref: '#/components/responses/BadParameters'
    put:
      summary: Edit a meal
      description: Requires to be content manager
      tags: [Meals]
      security:
        - AuthFunction: []
      parameters:
        - name: mealId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Meal
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          $ref: '#/components/responses/Meal'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a meal
      tags: [Meals]
      security:
        - AuthFunction: []
      parameters:
        - name: mealId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [SCAN_TICKET]
                userId:
                  type: string
                  description: (SCAN_TICKET)
                approvedType:
                  type: string
                  description: (SCAN_TICKET)
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a meal
      description: Requires to be content manager
      tags: [Meals]
      security:
        - AuthFunction: []
      parameters:
        - name: mealId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Meal'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    AppStatus:
      type: object
      additionalProperties: {}
    Configurations:
      type: object
      additionalProperties: {}
    User:
      type: object
      additionalProperties: {}
    EventSpot:
      type: object
      additionalProperties: {}
    UsefulLink:
      type: object
      additionalProperties: {}
    Venue:
      type: object
      additionalProperties: {}
    Communication:
      type: object
      additionalProperties: {}
    Organization:
      type: object
      additionalProperties: {}
    Room:
      type: object
      additionalProperties: {}
    Speaker:
      type: object
      additionalProperties: {}
    Session:
      type: object
      additionalProperties: {}
    Registration:
      type: object
      additionalProperties: {}
    Contest:
      type: object
      additionalProperties: {}
    Meal:
      type: object
      additionalProperties: {}

  responses:
    AppStatus:
      description: The app status for the targeted version
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/AppStatus'
    Configurations:
      description: The platform's configurations
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Configurations'
    User:
      description: A user of the platform
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/User'
    Users:
      description: The users of the platform
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    EventSpot:
      description: A spot for the event
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/EventSpot'
    EventSpots:
      description: The spots for the event
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EventSpot'
    UsefulLink:
      description: A useful link
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/UsefulLink'
    UsefulLinks:
      description: The useful links
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UsefulLink'
    Venue:
      description: Venue
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Venue'
    Venues:
      description: Venue[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Venue'
    Communication:
      description: Communication
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Communication'
    Communications:
      description: Communication[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Communication'
    Organization:
      description: Organization
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Organization'
    Organizations:
      description: Organization[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Organization'
    Room:
      description: Room
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Room'
    Rooms:
      description: Room[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Room'
    Speaker:
      description: Speaker
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Speaker'
    Speakers:
      description: Speaker[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Speaker'
    Session:
      description: Session
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Session'
    Sessions:
      description: Session[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Session'
    Registration:
      description: Registration
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Registration'
    Registrations:
      description: Registration[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Registration'
    Contest:
      description: Contest
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Contest'
    Contests:
      description: Contest[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Contest'
    Meal:
      description: Meal
      content:
        application/json:
          schema:
            type: object
            items:
              $ref: '#/components/schemas/Meal'
    Meals:
      description: Meal[]
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Meal'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
